#Modify the Array
Given an array arr. Return the modified array in such a way that if the current and next numbers are valid numbers and are 
equal then double the current number value and replace the next number with 0. 
After the modification, rearrange the array such that all 0's are shifted to the end.
Assume ‘0’ as the invalid number and all others as a valid number.
The sequence of the valid numbers is present in the same order.

class Solution {
    static ArrayList<Integer> modifyAndRearrangeArr(int arr[]) {
        // Step 1: Merge consecutive duplicate elements
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] == arr[i + 1]) {
                arr[i] = arr[i] + arr[i + 1];  // Double the value of the current element
                arr[i + 1] = 0;  // Set the next element to 0
            }
        }
        
        // Step 2: Move all non-zero elements to the front and push zeros to the back
        int index = 0;  // To track where the next non-zero element should go
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != 0) {
                arr[index] = arr[i];  // Place non-zero element at index
                index++;
            }
        }
        
        // Fill the rest of the array with zeros
        while (index < arr.length) {
            arr[index] = 0;
            index++;
        }

        // Step 3: Convert the int array to an ArrayList<Integer>
        ArrayList<Integer> result = new ArrayList<>();
        for (int num : arr) {
            result.add(num);  // Autoboxing from int to Integer
        }

        return result;
    }
}
